#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
## QianXingyue 516072910066
#
# Describe how and why you modified the baseline code.
# 1. Reduce jump misprediction
# 2. Change addq and subq instructions to iaddq instructions. and it also change CC, which can be used as jmp Cnd. 
# 3. 8 * 8 loop rolling for the number of datas greater than 8
# 4. 2 * 2 loop rolling for the number of datas less than 8
# 5. Do read and store at different time (store after count-process)
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
	# Loop header
	xorq %rax,%rax		# count = 0;
	iaddq $-8, %rdx
	jmp Check8

Read:	
	mrmovq (%rdi), %r8	# read val from src...	
	mrmovq 8(%rdi), %r9
	mrmovq 16(%rdi), %r10
	mrmovq 24(%rdi), %r11
	mrmovq 32(%rdi), %r12
	mrmovq 40(%rdi), %r13
	mrmovq 48(%rdi), %r14
	mrmovq 56(%rdi), %rcx
	
	andq %r8, %r8		# accumulating count	
	jle R9
	iaddq $1, %rax
R9:	andq %r9, %r9
	jle R10
	iaddq $1, %rax
R10:	andq %r10, %r10
	jle R11
	iaddq $1, %rax
R11:	andq %r11, %r11
	jle R12
	iaddq $1, %rax
R12:	andq %r12, %r12
	jle R13
	iaddq $1, %rax
R13:	andq %r13, %r13
	jle R14
	iaddq $1, %rax
R14:	andq %r14, %r14
	jle RCX
	iaddq $1, %rax
RCX:	andq %rcx, %rcx
	jle Store8
	iaddq $1, %rax

Store8:
	
	rmmovq %r8, (%rsi)	
	rmmovq %r9, 8(%rsi)
	rmmovq %r10, 16(%rsi)
	rmmovq %r11, 24(%rsi)
	rmmovq %r12, 32(%rsi)
	rmmovq %r13, 40(%rsi)
	rmmovq %r14, 48(%rsi)
	rmmovq %rcx, 56(%rsi)

	iaddq $64, %rdi		# src+8
	iaddq $64, %rsi		# dst+64
	iaddq $-8, %rdx		# len-8
Check8:
	jge Read			# if so, goto Read:	

	iaddq $4, %rdx 
	jl Remain2more
Remain4more:
	mrmovq (%rdi), %r8	# read val from src...
	mrmovq 8(%rdi), %r9
	mrmovq 16(%rdi), %r10
	mrmovq 24(%rdi), %r11

	andq %r8, %r8
	jle R2
	iaddq $1, %rax
R2:
	andq %r9, %r9
	jle R3
	iaddq $1, %rax
R3:
	andq %r10, %r10
	jle R4
	iaddq $1, %rax
R4:
	andq %r11, %r11
	jle Store4
	iaddq $1, %rax
Store4:
	rmmovq %r8, (%rsi)	
	rmmovq %r9, 8(%rsi)
	rmmovq %r10, 16(%rsi)
	rmmovq %r11, 24(%rsi)
	
	iaddq $32, %rdi		# src+8
	iaddq $32, %rsi		# dst+64
	iaddq $-4, %rdx

Remain2more:
	iaddq $2, %rdx
	jl Remain1

	mrmovq (%rdi), %r8	# read val from src...
	mrmovq 8(%rdi), %r9
	
	andq %r8, %r8
	jle R1
	iaddq $1, %rax
R1:
	andq %r9, %r9
	jle Store2
	iaddq $1, %rax	

Store2:
	rmmovq %r8, (%rsi)	
	rmmovq %r9, 8(%rsi)
	
	iaddq $16, %rdi		# src+8
	iaddq $16, %rsi		# dst+64
	iaddq $-2, %rdx

Remain1:
	iaddq $1, %rdx
	jl Return
	mrmovq (%rdi), %r8
	andq %r8, %r8
	jle Store1
	iaddq $1, %rax
Store1:
	rmmovq %r8, (%rsi)	# ...and store it to dst
Return:
##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
