#######################################################################
# Test for copying block of size 4;
#######################################################################
	.pos 0
main:	irmovq Stack, %rsp  	# Set up stack pointer

	# Set up arguments for copy function and then invoke it
	irmovq $4, %rdx		# src and dst have 4 elements
	irmovq dest, %rsi	# dst array
	irmovq src, %rdi	# src array
	call ncopy		 
	halt			# should halt with num nonzeros in %rax
StartFun:
#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
## QianXingyue 516072910066
#
# Describe how and why you modified the baseline code.
# 1. Reduce jump misprediction
# 2. Change addq and subq instructions to iaddq instructions. and it also change CC, which can be used as jmp Cnd. 
# 3. 8 * 8 loop rolling for the number of datas greater than 8
# 4. 2 * 2 loop rolling for the number of datas less than 8
# 5. Do read and store at different time (store after count-process)
# 6. Change the jXX to the mix of 4 jgs and 4jles.
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
	# Loop header

	iaddq $-8, %rdx
	jl Check2

Read:	
	mrmovq (%rdi), %r8	# read val from src...	
	mrmovq 8(%rdi), %r9
	mrmovq 16(%rdi), %r10
	mrmovq 24(%rdi), %r11
	mrmovq 32(%rdi), %r12
	mrmovq 40(%rdi), %r13
	mrmovq 48(%rdi), %r14
	mrmovq 56(%rdi), %rcx
	
	andq %r8, %r8		# accumulating count	
	jg Case111		#Case1ab: a is the number of 1, and b is the number of register that has been anded.
Case101:	
	andq %r9, %r9
	jg Case112
Case102:
	andq %r10, %r10
	jg Case113
Case103:
	andq %r11, %r11
	jg Case114
Case104:
	andq %r12, %r12
	jle Case105
Case115:
	andq %r13, %r13
	jle Case116
Case126:
	andq %r14, %r14
	jle Case127
Case137:
	andq %rcx, %rcx
	jle Case138
Case148:
	iaddq $4, %rax
	jmp Store8

Case111:
	andq %r9, %r9
	jg Case122
Case112:
	andq %r10, %r10
	jg Case123
Case113:
	andq %r11, %r11
	jg Case124
Case114:
	andq %r12, %r12
	jle Case115
Case125:
	andq %r13, %r13
	jle Case126
Case136:
	andq %r14, %r14
	jle Case137
Case147:
	andq %rcx, %rcx
	jle Case148
Case158:
	iaddq $5, %rax
	jmp Store8

Case122: 
	andq %r10, %r10
	jg Case133
Case123:
	andq %r11, %r11
	jg Case134
Case124:
	andq %r12, %r12
	jle Case125
Case135:
	andq %r13, %r13
	jle Case136
Case146:
	andq %r14, %r14
	jle Case147
Case157:
	andq %rcx, %rcx
	jle Case158
Case168:
	iaddq $6, %rax
	jmp Store8	
Case133:
	andq %r11, %r11
	jg Case144
Case134:
	andq %r12, %r12
	jle Case135
Case145:
	andq %r13, %r13
	jle Case146
Case156:
	andq %r14,%r14
	jle Case157
Case167:
	andq %rcx, %rcx
	jle Case168
Case178:
	iaddq $7, %rax
	jmp Store8

Case144:
	andq %r12, %r12
	jle Case145
Case155:
	andq %r13, %r13
	jle Case156
Case166:
	andq %r14, %r14
	jle Case167
Case177:
	andq %rcx, %rcx
	jle Case178
Case188:
	iaddq $8, %rax
	jmp Store8

Case105:
	andq %r13, %r13
	jle Case106
Case116:
	andq %r14, %r14
	jle Case117
Case127:
	andq %rcx, %rcx	
	jle Case128
Case138:
	iaddq $3, %rax
	jmp Store8
Case106:
	andq %r14, %r14
	jle Case107
Case117:
	andq %rcx, %rcx
	jle Case118
Case128:
	iaddq $2, %rax
	jmp Store8
Case107:
	andq %rcx, %rcx
	jle Case108
Case118:
	iaddq $1, %rax
Case108:
Store8:
	
	rmmovq %r8, (%rsi)	# ...and store it to dst
	rmmovq %r9, 8(%rsi)
	rmmovq %r10, 16(%rsi)
	rmmovq %r11, 24(%rsi)
	rmmovq %r12, 32(%rsi)
	rmmovq %r13, 40(%rsi)
	rmmovq %r14, 48(%rsi)
	rmmovq %rcx, 56(%rsi)

	iaddq $64, %rdi		# src+8
	iaddq $64, %rsi		# dst+64
	iaddq $-8, %rdx		# len-8
	jge Read			# if so, goto Read:	
Check2:
	iaddq $6, %rdx 
	jl Check
Remain2more:
	mrmovq (%rdi), %r8	# read val from src...
	mrmovq 8(%rdi), %r9
	andq %r8, %r8
	jle Register2
	iaddq $1, %rax
Register2:
	andq %r9, %r9
	jle Store2
	iaddq $1, %rax
Store2:	
	rmmovq %r8, (%rsi)	# ...and store it to dst
	rmmovq %r9, 8(%rsi)
	
	iaddq $16, %rdi		# src+16
	iaddq $16, %rsi		# dst+16
	iaddq $-2, %rdx		# len-2

	jge Remain2more
Check:
	iaddq $1, %rdx
	jl Return
Remain:	
	mrmovq (%rdi), %r10	# read val from src...
	andq %r10, %r10		# val <= 0?
	rmmovq %r10, (%rsi)
	jle Return		# if so, goto Return:
	iaddq $1, %rax		# count++	
Return:
	
##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
EndFun:

###############################
# Source and destination blocks 
###############################
	.align 8
src:
	.quad -1
	.quad 2
	.quad -3
	.quad 4
	.quad 0xbcdefa # This shouldn't get moved

	.align 16
Predest:
	.quad 0xbcdefa
dest:
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
Postdest:
	.quad 0xdefabc

.align 8
# Run time stack
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0

Stack:
